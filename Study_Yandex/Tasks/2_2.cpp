// !!! 2_2 - типы данных

#include <iostream>
#include <string>

// В С++ существует понятие области видимости (scope) переменной. 
// Эта область ограничивается блоком кода, в котором переменная определена. Рассмотрим пример:
//
// int a = 1; // глобальная переменная
//
// int main() {
//     int b = 2; // локальная переменная
//     {
//         int c = 3; // локальная переменая внутри блока
//         std::cout << a << " " << b << " " << c << "\n"; // корректно
//     }
//     //std::cout << c << "\n"; - "c" не в области, -> некорректно 
// }

// Типы данных
// int main() {
//     char c = '1';    // символ
//     bool b = true;   // логическая переменная, принимает значения false и true
//     int i = 42;      // целое число (занимает, как правило, 4 байта)
//     short int si = 17;           // короткое целое (занимает 2 байта)
//     long li = 12321321312;       // длинное целое (как правило, 8 байт)
//     long long lli = 12321321312; // длинное целое (как правило, 8 байт)
//     float f = 2.71828;           // дробное число с плавающей запятой (4 байта)
//     double d = 3.141592;         // дробное число двойной точности (8 байт)
//     long double ld = 1e15;       // длинное дробное (как правило, 16 байт)
// }

// Размер для типов
// int main() {
//     std::cout << "char: " << sizeof(char) << "\n";                 //  1
//     std::cout << "bool: " << sizeof(bool) << "\n";                 //  1
//     std::cout << "short int: " << sizeof(short int) << "\n";       //  2 (по стандарту >= 2)
//     std::cout << "int: " << sizeof(int) << "\n";                   //  4 (по стандарту >= 2)
//     std::cout << "long int: " << sizeof(long int) << "\n";         //  4 (по стандарту >= 4)
//     std::cout << "long long int: " << sizeof(long long) << "\n";   //  8 (по стандарту >= 8)
//     std::cout << "float: " << sizeof(float) << "\n";               //  4
//     std::cout << "double: " << sizeof(double) << "\n";             //  8
//     std::cout << "long double: " << sizeof(long double) << "\n";   // 16
// }

// Минимальное и максимальное значение, помещающееся в данный числовой тип, можно получить так:
// #include <limits>  // необходимо для numeric_limits
// int main() {
//     // посчитаем для типа int:
//     std::cout << "minimum value: " << std::numeric_limits<int>::min() << "\n"
//               << "maximum value: " << std::numeric_limits<int>::max() << "\n";
// }

// Приставка unsigned перед типом делает его беззнаковым
// int main() {
//     unsigned int a = 123456;
//     std::cout << a * a << "\n";
// }

// Арифметические операции
// int main() {
//     int a = 7, b = 3;
//     int q = a / b; // 2
//     int r = a % b; // 1
//     // Если при делении нужно получить обычное частное, то один из аргументов нужно привести к вещественному типу (например, double) с помощью оператора static_cast:
//     double e = static_cast<double>(a) / b; // 2.(3) || double q = a * 1.0 / b; 
//     std::cout << e;
// }

// Работа с символами 
// int main() {
//     char c = 'A';
//     c += 25; // увеличиваем ASCII-код символа на 25
//     std::cout << c << "\n";
// }

// Операторы ++ и --
// int main() {
//     int x = 5;
//     ++x; //6
//     --x; //5
// }

// Автоматический вывод типа
// int main() {
//     auto x = 42; // int
//     auto pi = 3.14159; // double
// }
// При использовании auto со строками нужно быть осторожным. Важно знать, что конструкция auto s = "hello" 
// выведет низкоуровневый тип const char * (указатель на неизменяемый набор символов в памяти), а не тип-обёртку std::string.

// Задача 1
// int main() {
//     double a;
//     std::cin >> a;
//     std::cout << a / 2.54 << "\n";
// }

// Задача 2
// int main() {
//     unsigned long long int n;
//     std::cin >> n;
//     std::cout << n * (n + 1) / 2 << "\n";
// }