// !!! 2_3 - Ветвления и циклы

#include <iostream>
#include <string>

// Условия можно комбинировать с помощью логических операторов && (и), || (или) и ! (не). 
// Рассмотрим пример, где проверяется принадлежность точки разным интервалам на прямой.
// int main() {
//     int a, b, x;
//     /* Тут должна быть логика заполнения объявленных переменных,
//     но мы её опустили, чтобы не отвлекаться */

//     if (a <= x && x <= b) {
//         // точка x лежит на отрезке [a; b]
//     } else {
//         // точка x лежит вне отрезка [a; b]
//     }

//     // то же самое можно было бы проверить так:
//     if (!(x < a || x > b)) {  // отрицание
//         // точка x лежит на отрезке [a; b]
//     } else {
//         // точка x лежит вне отрезка [a; b]
//     }
// }
// !!! Обратите внимание, что двойное неравенство некорректно проверять через a <= x <= b. 
//     Так можно написать, но смысл будет совсем другим: результат сравнения a <= x будет 
//     приведён к нулю или единице, и полученное число будет сравниваться с b.
// 
// !!! Операторы && и || ведут себя лениво: если первого аргумента уже достаточно для ответа, то второй аргумент вычисляться не будет. 
//     Например, в выражении condition1 && condition2 второе условие не вычисляется, если первое ложно. 

// Сравнени чисел float, из-за разнице в СС ответ будет неправильным - NOT EQUAL 0.3, хотя 0.1 + 0.2 = 0.3
// int main() {
//     double x = 0.1, y = 0.2;
//     if (x + y == 0.3) {
//         std::cout << "EQUAL";
//     } else {
//         std::cout << "NOT EQUAL ";
//     }
//     std::cout << x + y << "\n";
// }

// Правильное сравнение чисел float через погрешность
// int main() {
//     double delta = 0.000001;

//     double x = 0.1, y = 0.2;
//     double sum = x + y;

//     if (std::abs(sum - 0.3) < delta) {
//         std::cout << "EQUAL ";
//     } else {
//         std::cout << "NOT EQUAL ";
//     }

//     std::cout << sum << "\n";
// }

// Калькулятор

#include <cstdint>

int main() {
    int64_t a, b;
    char operation;
    std::cin >> a >> operation >> b;

    int64_t result = 0;
    if (operation == '+') {
        result = a + b;
    } else if (operation = '-') {
        result = a - b;
    } else if (operation == '*') {
        result = a * b;
    } else if (operation == '/' || operation == ':') {
        result = a / b;
    } else if (operation == '%') {
        result = a % b;
    }

    std::cout << result << "\n";
}